# -*- coding: utf-8 -*-
"""train_classifier.pynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15kzq0R5RtNj92YvsKt9PyVMaT_7b2Reg

# ML Pipeline Preparation
Follow the instructions below to help you create your ML pipeline.
### 1. Import libraries and load data from database.
- Import Python libraries
- Load dataset from database with [`read_sql_table`](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_sql_table.html)
- Define feature and target variables X and Y
"""

# import libraries
import numpy as np
import pandas as pd
import requests
import sqlite3    
import pickle
import re

from sqlalchemy import create_engine
import nltk
nltk.download(['punkt', 'wordnet', 'averaged_perceptron_tagger'])
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline, FeatureUnion, TransformerMixin
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.datasets import make_multilabel_classification
from sklearn.multioutput import MultiOutputClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import f1_score, recall_score, precision_score, classification_report, accuracy_score

# load data from database
engine = create_engine('sqlite:///DisasterResponse.db')
df = pd.read_sql_table('DisasterResponse', engine)
X = df['message']
Y = df[df.columns[4:]]
category_names = Y.columns

category_names

"""### 2. Write a tokenization function to process your text data"""

def tokenize(text):
    
    """Tokenize the text 
    
    Tokenize the text information by using word_tokenize and WordNetLemmatizer
    
    INPOUT:
    -----------
    text: the information of the message in the data
    
    OUTPUT:
    ----------
    result: the modified text
    """
    
    #To hadle with special characteres
    text = re.sub(r"[^a-zA-Z0-9]", " ", text)
    
    # tokenize text
    tokens = word_tokenize(text)
    
    #  group the different forms of a word
    lemmatizer = WordNetLemmatizer()

    clean_tokens = []
    for tok in tokens:
        clean_tok = lemmatizer.lemmatize(tok).lower().strip()
        clean_tokens.append(clean_tok)

    return clean_tokens

"""### 3. Build a machine learning pipeline
This machine pipeline should take in the `message` column as input and output classification results on the other 36 categories in the dataset. You may find the [MultiOutputClassifier](http://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputClassifier.html) helpful for predicting multiple target variables.
"""

pipeline = Pipeline([
    ("text_pipeline", Pipeline([
        ("vect", CountVectorizer(tokenizer=tokenize)),
        ("tfidf", TfidfTransformer())
    ])),
    ("clf", MultiOutputClassifier(BaggingClassifier()))
])

"""### 4. Train pipeline
- Split data into train and test sets
- Train pipeline
"""

# train and test data
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=123)

#train pipeline
pipeline.fit(X_train, y_train)

"""### 5. Test your model
Report the f1 score, precision and recall for each output category of the dataset. You can do this by iterating through the columns and calling sklearn's `classification_report` on each.
"""

#Predict the values using the model
y_pred = pipeline.predict(X_test)

#create the report of metrics
#report_metrics = classification_report(y_test.values, y_pred, target_names = category_names)
#report_metrics

"""### 6. Improve your model
Use grid search to find better parameters. 
"""

# params
params = {
    'base_estimator__max_depth' : [1, 2, 3, 4, 5],
    'max_samples' : [0.05, 0.1, 0.2, 0.5]
}

# train model
cv = GridSearchCV(pipeline, param_grid=params, cv=3)

"""### 7. Test your model
Show the accuracy, precision, and recall of the tuned model.  

Since this project focuses on code quality, process, and  pipelines, there is no minimum performance metric needed to pass. However, make sure to fine tune your models for accuracy, precision and recall to make your project stand out - especially for your portfolio!
"""

#Predict the values using the model
y_pred_cv = cv.predict(X_test)

#create the report of metrics
report_metrics_cv = classification_report(y_test.values, y_pred_cv, target_names = category_names)
report_metrics_cv

"""### 8. Try improving your model further. Here are a few ideas:
* try other machine learning algorithms
* add other features besides the TF-IDF
"""

pipeline_2 = Pipeline([
        ('vect', CountVectorizer(tokenizer=tokenize)),
        ('tfidf', TfidfTransformer()),
        ('clf', MultiOutputClassifier(AdaBoostClassifier()))
    ])

#train pipeline
pipeline_2.fit(X_train, y_train)

y_pred_2 = pipeline_2.predict(X_test)

"""### 9. Export your model as a pickle file"""

import pickle

with open("classifier.pickle", "wb") as file:
    pickle.dump(cv, file)

"""### 10. Use this notebook to complete `train.py`
Use the template file attached in the Resources folder to write a script that runs the steps above to create a database and export a model based on a new dataset specified by the user.
"""

